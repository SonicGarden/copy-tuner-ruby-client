#!/usr/bin/env ruby

require 'mcp'
require 'mcp/transports/stdio'

require File.expand_path(File.join('config', 'environment'))

class TranslateTool < MCP::Tool
  tool_name 'translate'
  description 'Retrieves the translated text for a given i18n key and language, based on Rails locale files.'
  input_schema(
    properties: {
      key: { type: 'string' },
      locale: { type: 'string' },
    },
    required: ["key"]
  )

  class << self
    def call(key:, locale: 'ja', server_context:)
      key_with_locale = [locale, key].join('.')
      result = CopyTunerClient.cache.blurbs.fetch(key_with_locale, '')

      MCP::Tool::Response.new([{
        type: "text",
        text: result,
      }], result.blank?)
    end
  end
end

class SearchKeyTool < MCP::Tool
  tool_name 'search_key'
  description 'Search and retrieve Rails i18n translation keys. Optimized for finding keys used with t() or I18n.t(), checking multilingual translation content, and getting locale-specific translation values. Quickly finds accurate keys and translations from copy_tuner project translation database.'
  input_schema(
    properties: {
      query: { type: 'string' },
      locale: { type: 'string', default: 'ja' },
    },
    required: ["query"]
  )

  class << self
    def call(query:, locale: 'ja', server_context:)
      results = CopyTunerClient.cache.blurbs
        .select { |key, _| key.start_with?("#{locale}.") && key.include?(query) }
        .transform_keys { |key| key.split('.', 2).last }

      MCP::Tool::Response.new([{
        type: 'text',
        text: JSON.pretty_generate(results),
      }], results.empty?)
    end
  end
end

class  SearchTranslationsTool < MCP::Tool
  tool_name 'search_translations'
  description 'Search and retrieve Rails i18n translations by content. Optimized for finding translations containing specific text, checking translation values across languages, and discovering keys by their translated content. Quickly finds accurate translations and keys from copy_tuner project translation database.'
  input_schema(
    properties: {
      query: { type: 'string' },
      locale: { type: 'string', default: 'ja' },
    },
    required: ["query"]
  )

  class << self
    def call(query:, locale: 'ja', server_context:)
      results = CopyTunerClient.cache.blurbs
        .select { |key, value| key.start_with?("#{locale}.") && value.include?(query) }
        .transform_keys { |key| key.split('.', 2).last }

      MCP::Tool::Response.new([{
        type: 'text',
        text: JSON.pretty_generate(results),
      }], results.empty?)
    end
  end
end

server = MCP::Server.new(
  name: "copytuner_mcp_server",
  tools: [TranslateTool, SearchKeyTool, SearchTranslationsTool],,
)

transport = MCP::Transports::StdioTransport.new(server)
transport.open
